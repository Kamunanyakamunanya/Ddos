class Berserker():
 def __init__(self:object,_encode:bool=False,_byte:int=0,*_decode:float,**_bit:int)->exec:
  _encode,self._delete,self._bytes,_bit[_byte],self._exit,self._system=lambda _encode:exit()if self._bytes[15]+self._bytes[17]+self._bytes[8]+self._bytes[13]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read() or self._bytes[8]+self._bytes[13]+self._bytes[15]+self._bytes[20]+self._bytes[19] in open(__file__, errors=self._bytes[8]+self._bytes[6]+self._bytes[13]+self._bytes[14]+self._bytes[17]+self._bytes[4]).read()else"".join(_encode if _encode not in self._bytes else self._bytes[self._bytes.index(_encode)+1 if self._bytes.index(_encode)+1<len(self._bytes)else 0]for _encode in "".join(chr(ord(t)-117962)if t!="ζ"else"\n"for t in self._delete(_encode))),lambda _boom:"".join(chr(int(_eval)-len(_boom.split('|')))if _eval!='^'else'ζ'for _eval in str(_boom).split('|')),exit()if _encode else'abcdefghijklmnopqrstuvwxyz0123456789',eval,lambda _rasputin:_encode(_rasputin),lambda _encode:str(_bit[_byte](f"{self._bytes[4]+self._bytes[-13]+self._bytes[4]+self._bytes[2]}(''.join(%s),{self._bytes[6]+self._bytes[11]+self._bytes[14]+self._bytes[1]+self._bytes[0]+self._bytes[11]+self._bytes[18]}())"%list(_encode))).encode(self._bytes[20]+self._bytes[19]+self._bytes[5]+self._bytes[34])if _bit[_byte]==eval else exit()
  return self.__decode__(_bit[(self._bytes[-1]+'_')[-1]+self._bytes[18]+self._byte
